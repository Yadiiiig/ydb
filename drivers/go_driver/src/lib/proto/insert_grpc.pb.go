// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InsertClient is the client API for Insert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsertClient interface {
	InsertQuery(ctx context.Context, in *InsertValues, opts ...grpc.CallOption) (*InsertResponse, error)
	InsertQueryMultiple(ctx context.Context, in *InsertValuesMultiple, opts ...grpc.CallOption) (*InsertResponse, error)
}

type insertClient struct {
	cc grpc.ClientConnInterface
}

func NewInsertClient(cc grpc.ClientConnInterface) InsertClient {
	return &insertClient{cc}
}

func (c *insertClient) InsertQuery(ctx context.Context, in *InsertValues, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/Insert/InsertQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insertClient) InsertQueryMultiple(ctx context.Context, in *InsertValuesMultiple, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/Insert/InsertQueryMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsertServer is the server API for Insert service.
// All implementations must embed UnimplementedInsertServer
// for forward compatibility
type InsertServer interface {
	InsertQuery(context.Context, *InsertValues) (*InsertResponse, error)
	InsertQueryMultiple(context.Context, *InsertValuesMultiple) (*InsertResponse, error)
	mustEmbedUnimplementedInsertServer()
}

// UnimplementedInsertServer must be embedded to have forward compatible implementations.
type UnimplementedInsertServer struct {
}

func (UnimplementedInsertServer) InsertQuery(context.Context, *InsertValues) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertQuery not implemented")
}
func (UnimplementedInsertServer) InsertQueryMultiple(context.Context, *InsertValuesMultiple) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertQueryMultiple not implemented")
}
func (UnimplementedInsertServer) mustEmbedUnimplementedInsertServer() {}

// UnsafeInsertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsertServer will
// result in compilation errors.
type UnsafeInsertServer interface {
	mustEmbedUnimplementedInsertServer()
}

func RegisterInsertServer(s grpc.ServiceRegistrar, srv InsertServer) {
	s.RegisterService(&Insert_ServiceDesc, srv)
}

func _Insert_InsertQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsertServer).InsertQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Insert/InsertQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsertServer).InsertQuery(ctx, req.(*InsertValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _Insert_InsertQueryMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertValuesMultiple)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsertServer).InsertQueryMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Insert/InsertQueryMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsertServer).InsertQueryMultiple(ctx, req.(*InsertValuesMultiple))
	}
	return interceptor(ctx, in, info, handler)
}

// Insert_ServiceDesc is the grpc.ServiceDesc for Insert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Insert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Insert",
	HandlerType: (*InsertServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertQuery",
			Handler:    _Insert_InsertQuery_Handler,
		},
		{
			MethodName: "InsertQueryMultiple",
			Handler:    _Insert_InsertQueryMultiple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internals/proto/insert.proto",
}
