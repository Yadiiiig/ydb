// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeleteClient is the client API for Delete service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteClient interface {
	DeleteQuery(ctx context.Context, in *DeleteValues, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type deleteClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteClient(cc grpc.ClientConnInterface) DeleteClient {
	return &deleteClient{cc}
}

func (c *deleteClient) DeleteQuery(ctx context.Context, in *DeleteValues, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/Delete/DeleteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteServer is the server API for Delete service.
// All implementations must embed UnimplementedDeleteServer
// for forward compatibility
type DeleteServer interface {
	DeleteQuery(context.Context, *DeleteValues) (*DeleteResponse, error)
	mustEmbedUnimplementedDeleteServer()
}

// UnimplementedDeleteServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteServer struct {
}

func (UnimplementedDeleteServer) DeleteQuery(context.Context, *DeleteValues) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuery not implemented")
}
func (UnimplementedDeleteServer) mustEmbedUnimplementedDeleteServer() {}

// UnsafeDeleteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteServer will
// result in compilation errors.
type UnsafeDeleteServer interface {
	mustEmbedUnimplementedDeleteServer()
}

func RegisterDeleteServer(s grpc.ServiceRegistrar, srv DeleteServer) {
	s.RegisterService(&Delete_ServiceDesc, srv)
}

func _Delete_DeleteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteServer).DeleteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Delete/DeleteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteServer).DeleteQuery(ctx, req.(*DeleteValues))
	}
	return interceptor(ctx, in, info, handler)
}

// Delete_ServiceDesc is the grpc.ServiceDesc for Delete service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Delete_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Delete",
	HandlerType: (*DeleteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteQuery",
			Handler:    _Delete_DeleteQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internals/proto/delete.proto",
}
